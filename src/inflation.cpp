#include <fsim/ElasticMembrane.h>
#include "fsim/StVKElement.h"
#include <fsim/util/io.h>
#include <fsim/util/typedefs.h>
#include <optim/NewtonSolver.h>
#include <polyscope/surface_mesh.h>
#include <iostream>
//#include <map>


std::vector<int> findBoundaryVertices(fsim::Mat3<int> F) {
  // Edge represented by a pair of vertex indices, with a count of how many faces share the edge
  std::map<std::pair<int, int>, int> edgeCount;

  for(int i = 0; i < F.rows(); ++i){
    auto face = F.row(i);
    int n = face.size();
    for (int i = 0; i < n; ++i) {
      int v1 = face[i];
      int v2 = face[(i + 1) % n]; // Next vertex in the face, wrapping around to the start
      if (v1 > v2) std::swap(v1, v2); // Ensure the first vertex in the pair is the smaller one
      edgeCount[{v1, v2}]++;
    }
  }

  // Set to hold boundary vertices (using a set to avoid duplicates)
  std::set<int> boundaryVertices;

  // Identify boundary edges and their vertices
  for (const auto& edge : edgeCount) {
    if (edge.second == 1) { // Boundary edge found
      boundaryVertices.insert(edge.first.first);
      boundaryVertices.insert(edge.first.second);
    }
  }

  // Convert set to vector and return
  return std::vector<int>(boundaryVertices.begin(), boundaryVertices.end());
}



int main(int argc, char *argv[]) {
  using namespace Eigen;

  // load geometry from OFF mesh file
  fsim::Mat3<double> V;
  fsim::Mat3<int> F;
//  fsim::readOFF("/Users/duch/Downloads/pillow_uni.off", V, F);
//  fsim::readOFF("/Users/duch/Downloads/pillow.off", V, F);
//  fsim::readOFF("/Users/duch/Downloads/butt_out.off", V, F);
  fsim::readOFF("/Users/duch/Downloads/2part_opt.off", V, F);
//  fsim::readOFF("/Users/duch/Downloads/barrel_vaultz_tri.off", V, F);

  //  V *= 10;



  // parameters of the membrane model
  double young_modulus = 50000;  // knit: ~50kPa https://journals.sagepub.com/doi/pdf/10.1177/0040517510371864
  double thickness = 0.4;
  double thickness2 = 0.6;
  double poisson_ratio = 0.38;  // 0.38
  double stretch_factor = 1.05;
  double mass = 30; // mass per area, density * material thickness= 1500kg/m3 * 0.02 = 30kg/m2
  double pressure = 250; // pressure per area N/m2, Pa, air-supported structure 200-300 Pa


//  std::vector<double> thicknesses(F.rows(), thickness); // Assuming F.rows() gives the correct size

  std::vector<double> thicknesses;
//  pillow input
  std::string input =" 0.440857 0.488932 0.521964 0.700636 0.482672 0.283378 0.640212 0.590059 0.673932 0.507053 0.586569  0.51412 0.540003 0.316103 0.515433 0.514977 0.602821  0.68592 0.539933 0.387109 0.558979 0.543657 0.570397 0.487203 0.581004 0.507854 0.489702 0.595316 0.664115 0.558825  0.60909 0.580147 0.286076 0.345766 0.668956  0.52605 0.566163 0.527149 0.642801  0.53945 0.632708 0.565185 0.499673 0.480522  0.64206 0.489709 0.488812  0.53487 0.611194 0.646082 0.489844 0.625346 0.645511 0.543344 0.536926 0.521528 0.696089 0.660797 0.681955 0.565563 0.625225 0.694221  0.64289 0.504201 0.527209 0.532751 0.501674 0.407866 0.378889 0.503894 0.583032  0.48091 0.704985 0.513105 0.566816 0.576139 0.576543 0.618199 0.503053 0.518495  0.37583 0.593543 0.356913 0.504521 0.522129 0.711143 0.678931 0.510703 0.727849 0.672662 0.655745 0.598224 0.543676 0.702499 0.396506  0.56402 0.431253  0.59427 0.735647 0.486912 0.501172 0.457692 0.383329 0.477257 0.645676 0.612549  0.52642 0.510562 0.461478 0.479094  0.43734 0.538516 0.643568 0.604833 0.519472 0.492786 0.501962 0.578268 0.486735 0.670967 0.579245 0.553293 0.677322 0.630264 0.666647 0.592517 0.706517 0.548998 0.403011 0.568047 0.698448 0.538049 0.232657 0.436706    0.563 0.511858  0.45638 0.309846 0.407149 0.628837 0.708558  0.53755 0.602185 0.322646 0.378904 0.500804 0.314922 0.510556 0.521006 0.512202 0.592077 0.432471 0.745095 0.500003 0.717625  0.66662 0.630428 0.542009 0.607014 0.511447 0.300494 0.384896 0.515174 0.678473 0.459111 0.542001 0.532039 0.468624 0.499102  0.54779  0.36597 0.434211 0.475487 0.395959 0.685785 0.536321 0.519436  0.55207 0.557396  0.64875 0.538556 0.583033 0.685287 0.567642 0.580116 0.503266 0.599684 0.644878 0.520206 0.581643 0.463981 0.340515 0.654738 0.563262 0.282366 0.512692 0.507122 0.509209 0.489998 0.551803  0.47434 0.709535 0.454808 0.602299 0.533045  0.49639 0.525197 0.529654 0.656213 0.512793 0.561796 0.436011  0.58318 0.675967 0.639652 0.599534 0.419702 0.385582 0.316446 0.371129  0.54478 0.465589 0.330458 0.575551 0.662314 0.489438 0.315783 0.462375 0.580587 0.444027 0.429966  0.69513 0.544174 0.467903 0.519989 0.572878 0.493594 0.658624 0.676078 0.596823  0.57265 0.389451 0.645391 0.561733 0.289292 0.374422 0.316024 0.514055 0.487545 0.534625 0.619554 0.555512 0.389345 0.558423 0.434976 0.319441 0.452615 0.547529 0.656447 0.551799 0.509597 0.620691  0.48754 0.328427 0.370135 0.382407 0.392812 0.333619 0.492471 0.458781 0.414422 0.604136 0.379739  0.32444 0.493436 0.506083 0.635423 0.327649 0.457774 0.417432 0.501335 0.565251 0.824359 0.340952 0.756548 0.482756 0.564115 0.432325 0.636473 0.389833  0.57298 0.476438 0.708901  0.65058 0.571707 0.662857 0.686297  0.69627 0.622296 0.589688 0.540138 0.650987 0.672977 0.601464 0.588341 0.546339 0.542072 0.547292 0.474505 0.522181 0.563579 0.604818 0.403092 0.581677 0.566114 0.572856 0.630184 0.373829 0.655678 0.454072 0.607798 0.367024 0.312993 0.532781 0.584396 0.563119 0.685276 0.663263  0.49391  0.57455 0.317056 0.382703 0.509788 0.664883 0.674291 0.620915 0.393731 0.647341 0.428117 0.570953 0.372775 0.421681 0.486741 0.518293 0.568064 0.476182  0.49437 0.521316 0.547842 0.365701 0.351954 0.572198 0.413038 0.515037 0.395511 0.559535  0.44408 0.660234  0.57743 0.506496 0.415494 0.553915 0.416179 0.514898 0.547964 0.660191 0.507998 0.448274 0.636398 0.590161 0.477902 0.522629 0.545806 0.623319 0.576133 0.618486 0.600101  0.59045 0.543296 0.657942 0.429402 0.516662 0.502126 0.480037 0.408781 0.466304 0.544977 0.652487 0.258184  0.57661 0.597408 0.609426 0.568227  0.48374  0.62262 0.573629 0.646887 0.327914 0.540906 0.418774 0.463452 0.461204 0.719095 0.537782 0.437767 0.504906 0.523361  0.56152 0.573938 0.534447 0.616016 0.499976 0.520514  0.68545  0.61245 0.640804 0.439715 0.469216 0.497926 0.467263 0.452988  0.59297 0.658637 0.652232 0.572423 0.486262 0.449484 0.453751 0.366729 0.569515 0.492157 0.432922 0.513186 0.431717 0.466371 0.555558 0.535273 0.492554 0.573241 0.578157 0.615702 0.559339 0.638654 0.603013 0.527383 0.645335  0.48641 0.675584 0.569952 0.387704  0.42606 0.531808 0.534792 0.403563   0.4749 0.436173 0.585236 0.637653  0.42521 0.564012 0.332984 0.424666 0.437641 0.492187  0.68224 0.332905 0.641019 0.606228  0.41261 0.751785 0.614246 0.568014 0.546905 0.568375 0.530335  0.61112 0.491305 0.416642 0.514719 0.592102 0.568916 0.395841 0.654872 0.301427 0.418307 0.579229 0.390938 0.340729 0.473833  0.34405 0.446116 0.578754 0.481194 0.579979 0.562499 0.545994 0.638315 0.392252 0.590716 0.608764 0.415484 0.551803 0.528138 0.587965 0.567263 0.673567 0.563956 0.318748 0.381836 0.564071 0.518345 0.224823 0.528633 0.629864 0.542332 0.503354 0.317106 0.424613 0.725747  0.42131  0.53897 0.649299 0.591948 0.620362 0.644242 0.659356 0.423088 0.576933 0.529466 0.521524  0.55808 0.517939 0.486849 0.495246 0.389489  0.33742  0.51153  0.62004 0.504225 0.367301 0.539426 0.612676  0.56914 0.254735 0.422051 0.423482 0.255554 0.362296 0.587825 0.330285 0.336154 0.566137 0.465563 0.503343  0.56116 0.533413 0.456665 0.596832 0.432667 0.588342 0.482863  0.28678 0.292518 0.263516 0.421396 0.453709 0.596464 0.532925  0.55023 0.521177 0.468099 0.431006 0.260096 0.364159 0.616387 0.701486 0.576617 0.548944 0.519776 0.449988 0.378251 0.514609 0.352855  0.51566  0.40257 0.500684 0.436961 0.397434 0.682574 0.442307 0.276948  0.51488 0.419704 0.545371 0.406851 0.526155 0.411311 0.565617  0.50109  0.55264 0.380853 0.601239  0.27616 0.571957 0.420184 0.606623 0.527071 0.505802 0.517742 0.610497  0.68244 0.412538 0.472423 0.647983 0.646394 0.639342 0.656155  0.60555  0.58058 0.706798  0.61546 0.527907   0.5929 0.394448  0.47376 0.676246 0.372705 0.426095 0.534779 0.682769 0.491822 0.466697   0.5242 0.546823";




  //  std::string input = "0.698928 0.654301 0.655059 0.695048 0.688508 0.904851 0.926763 0.669571   0.9262 0.425717 0.700376   0.9455 0.944867 0.912322 0.739242 0.641576 0.666364 0.938307 0.966247 0.640059 0.857418 0.631356 0.761595 0.576508 0.568498 0.407196 0.446479  0.51104 0.565269 0.561147 0.516148 0.524691 0.454096  0.98318 0.500346 0.470792 0.452581 0.474349 0.766786 0.251303 0.492601 0.476465 0.462343 0.473338 0.478226 0.422807 0.418882 0.485436  0.42238 0.416315 0.553187 0.586852 0.655367 0.620114 0.526205  0.60733 0.550968 0.616024 0.623781 0.609462 0.445296 0.434081 0.391089 0.387327 0.540568 0.530871 0.543708 0.572486 0.529158 0.523325 0.576637 0.469402 0.449436 0.456861 0.536913 0.490668 0.490528 0.548147 0.498159  0.51104 0.632445 0.549662 0.534666 0.615354 0.440441 0.471828  0.43125 0.429453 0.411909 0.424884 0.457112 0.466417 0.415943 0.411728 0.449428  0.48968 0.386483 0.399899 0.480859 0.454438 0.527575 0.490835 0.512648 0.508703 0.388301 0.391606 0.394097 0.419093  0.40041  0.39704 0.442089 0.434764 0.465374 0.418395 0.477967  0.46528 0.635329 0.617637 0.581638 0.579042 0.457084 0.466678 0.393985 0.384561 0.471774 0.638023 0.522611 0.420685  0.38375 0.414322 0.490645 0.491181 0.534662 0.420584 0.392156 0.916327  0.40277 0.391175 0.535642 0.481741 0.424435  0.40755 0.522142 0.657284 0.394347 0.415567 0.499287 0.511158 0.429107 0.400145 0.398556 0.398333 0.746108 0.530425 0.449026 0.390682 0.388659  0.47547 0.531896 0.516579 0.412733 0.495749 0.381347 0.377145 0.541462 0.444087 0.451853 0.578299 0.448937 0.473019 0.430911 0.420123 0.339142 0.848691  0.51474 0.703836 0.549644 0.542768 0.493039 0.507486 0.490731 0.466695 0.566666 0.512096 0.548305 0.593054 0.617553 0.540342 0.499098 0.522464 0.510607 0.415725 0.538685 0.562005 0.559507 0.551657  0.54175 0.531274 0.445149 0.530218  0.39897 0.412611 0.562161  0.54551 0.538146  0.54162  0.65322 0.521139 0.575581 0.611751 0.471396 0.446955 0.508216 0.505325 0.488558 0.511355 0.455694 0.455617 0.438779 0.453689 0.487673 0.455994 0.437001 0.421951  0.47052 0.426944 0.417917 0.414791  0.50427 0.500598 0.475018 0.483019 0.625707 0.530252 0.482002 0.480713 0.474407 0.484629 0.564015 0.547743 0.494072  0.49867 0.368621 0.401414 0.369268  0.37598 0.407282 0.403748 0.465825 0.471685 0.544005 0.536043 0.563444  0.55926 0.455304 0.481118 0.606811 0.569022 0.516769 0.478337 0.610078 0.619837 0.506911 0.509663 0.650265 0.608087 0.381303 0.374722 0.412973 0.424798 0.432744 0.395884 0.359339 0.370949 0.619672  0.63943 0.355797 0.373128 0.389465 0.398105 0.392996 0.411458 0.388584 0.407029 0.388326  0.37982";
//
//    std::string input = "0.657655 0.628292 0.509292 0.917269  0.65767 0.680479  0.67069 0.634419 0.676759 0.584206 0.659207 0.828692 0.722951 0.649322 0.666264 0.625431  0.64144 0.674759 0.681948  0.63856 0.621616 0.671636  1.06267 0.578616 0.422815 0.470303 0.430033 0.389521 0.406657 0.411848 0.446585 0.412595 0.655807 0.647792 0.453247 0.467251 0.717998 0.598592 0.625644 0.658765 0.464063 0.457056 0.613644 0.559079 0.536443 0.540829 0.482362 0.491426 0.568003 0.437445 0.453233 0.436534 0.426773 0.433771 0.493033 0.492627 0.497655 0.497757 0.440851 0.494602 0.495107 0.485955 0.419764 0.435528 0.482392  0.47128 0.467931 0.447328 0.691204 0.483478 0.436586 0.413273 0.474692 0.441842 0.455386 0.438952 0.414395  0.43302 0.512389 0.594495 0.650026 0.582784 0.638039 0.641149 0.418316 0.423437 0.445774 0.441489 0.420057 0.430147 0.425821 0.422622  0.48555 0.482043 0.426416 0.449443 0.488011 0.484912 0.503061 0.468051 0.374448  0.54554 0.364772  0.35432 0.447123 0.445988 0.502358 0.496368 0.438786 0.496666  0.51528 0.517675 0.587777 0.538133 0.507939 0.533227 0.424379 0.433104 0.451262 0.481324 0.527585  0.53769 0.657291 0.644257 0.622401  0.62396 0.449478 0.449787 0.440099 0.443161 0.404518 0.455827 0.490173 0.458602 0.519748 0.660226 0.575164 0.572881 0.608722 0.524333 0.437086  0.42428 0.520421 0.637616 0.603513 0.576479 0.558984 0.547556  0.40681 0.439089 0.364018 0.410635 0.687256 0.646649 0.469598 0.555208 0.543362 0.537662 0.524814  0.49122 0.559403 0.543507 0.427451 0.424101 0.443981 0.476945 0.487654 0.471451 0.422677 0.510999 0.534138 0.539635 0.265805 0.258928 0.531789 0.668869 0.598109 0.600628 0.580288 0.569003 0.501977   0.5074 0.484508  0.51534 0.609412 0.599602 0.503794 0.532455 0.441877 0.540077 0.345156 0.353757 0.516222  0.50087 0.496583 0.501556 0.658557 0.656209 0.466548 0.483648  0.44562 0.496999 0.551235 0.563183  0.47913 0.507257 0.539566 0.508957 0.422288 0.438211 0.450378 0.437364 0.537147 0.543684 0.549522 0.572074 0.460551 0.453883 0.465914 0.512354  0.52033 0.510286 0.651602 0.713205 0.418775 0.451997 0.462639 0.469195 0.371003 0.369526  0.43074  0.41862 0.686681 0.681427 0.535911 0.545347 0.493307 0.490569 0.511539  0.50895 0.583974 0.544588 0.464733 0.457943 0.444422 0.444734 0.445888 0.513033 0.513499 0.493274 0.484299 0.481355  0.63213 0.633634 0.461101 0.443682 0.445212 0.457383 0.453735 0.423757 0.411161 0.387512 0.524474 0.613433 0.649113 0.631264 0.455004 0.457581 0.402275 0.460603 0.426186 0.420338  0.47547 0.458982  0.39501  0.41311 0.580089 0.573795 0.391309 0.434213 0.634301 0.620432 0.507746 0.462465 0.423906 0.444549";
//  std::string input = "0.890114  0.65071 0.944507  1.16826 0.827962  0.96686  0.91138 0.758391  1.01417 0.867887  1.00854 0.881118 0.845986 0.682771  1.23783 0.669799 0.981993 0.615369 0.671224  0.66426 0.740966 0.889021 0.821676 0.722041 0.540069 0.545072 0.423967 0.465548 0.441326  0.49406 0.461529  0.47647 0.588817 0.572742 0.587759 0.575777 0.663572 0.585094 0.500864 0.377131 0.418553 0.416764 0.417808 0.433508 0.512308 0.481427  0.52333 0.510983 0.531031 0.510317 0.427329  0.40392 0.479156 0.423192 0.522596 0.498953 0.525741 0.547724 0.501091 0.489501 0.449822 0.520452 0.565644 0.539036 0.488473 0.482628  0.43544 0.447278 0.554715 0.472533 0.573494 0.556539 0.476257 0.477345 0.429028 0.427027 0.506667 0.480056 0.451916 0.435694   1.0228 0.512972 0.412825 0.382944 0.521542 0.524247 0.502433 0.506052 0.539253 0.499731 0.749258 0.245334 0.444616 0.434065 0.393804 0.432107 0.506916 0.412551 0.433241 0.490803 0.512172 0.515889 0.553677 0.551466 0.482372 0.499172 0.470303 0.482599 0.465013 0.446122 0.444638 0.468563  0.47443 0.467389 0.447899 0.469205 0.501928  0.45724 0.462719  0.42854 0.463168 0.430915 0.950023 0.428574 0.467249 0.466346 0.370971 0.493457 0.495872  0.52378  0.45847  0.48007 0.626613 0.516294 0.524495 0.672433 0.363292 0.399107 0.662229 0.472567 0.512228 0.518983 0.612962  0.73248 0.779011 0.748328 0.526027 0.515777 0.533039 0.524427 0.516387 0.537391 0.553769 0.484829 0.505831 0.448431 0.481814   0.4313  0.45774 0.457943 0.439929 0.478542 0.575281 0.548794  0.54786 0.571022 0.419536 0.487884  0.57081 0.586518 0.680843 0.618855 0.665843 0.679342 0.589494 0.840755 0.732229 0.720317 0.448596 0.439777 0.461708 0.434421 0.446428 0.463725 0.686019 0.682886 0.441151 0.615135 0.505061 0.593637 0.553491 0.529191 0.569664 0.557206 0.474243 0.498176 0.521722 0.575778 0.459371 0.454503 0.497366 0.465153 0.476054 0.480655 0.465057 0.437592 0.834555 0.875293 0.512122 0.548305 0.464916 0.450796 0.429529 0.456878 0.490007 0.459384 0.428189 0.470558 0.514201 0.513367 0.462977 0.464947 0.505542 0.374457 0.590675 0.593601 0.413638 0.439997 0.539489 0.557302 0.515691  0.51592 0.501011  0.52408 0.446663 0.428627 0.409197 0.431833 0.475068 0.492714 0.494171 0.480707 0.528458 0.547662 0.552354 0.551779 0.544521 0.463753 0.409918 0.419843 0.455998 0.404684 0.492942 0.413273 0.563668 0.467486 0.498733 0.498776 0.517937 0.547629 0.495397 0.495399 0.489837 0.516895 0.652119 0.522043 0.525242 0.524983 0.502094 0.502207 0.523105  0.49215 0.530701 0.565701 0.542053 0.514998 0.509336 0.552592 0.540855 0.529181 0.397815 0.428969 0.533972 0.572359 0.534743 0.542187";
//  std::vector<double> thicknesses;
//
//  // without smoothing
//  //  std::string input = "0.651031 0.799726 0.779236 0.864845  1.25844 0.954596 0.942375  1.03806 0.725964  0.48541  1.06476  0.80293  1.16568  1.00172 0.663914 0.483183 0.316559 0.574825   1.2127  0.86006 0.345298  0.36133 0.878782   0.9318 0.194563 0.477641 0.442168 0.673728 0.278436 0.474346 0.486093 0.534601 0.399603      0.1 0.301877 0.648063 0.916115 0.732142 0.785839 0.553603 0.754471 0.429048 0.949596 0.939124 0.971376 0.966993 0.186621 0.550666 0.659503 0.737803      0.1 0.477025      0.1 0.549078 0.515712 0.703666 0.322875 0.380362 0.196524 0.440336 0.421374      0.1  0.15605 0.242082  0.42082  0.67469   0.1547 0.458576 0.200575 0.497013 0.546867 0.428842 0.276115 0.193427 0.872218 0.692907 0.587334 0.670277 0.309654 0.463983 0.393164 0.157918 0.347134  0.39621   0.4259 0.556375 0.254237 0.204866   1.1374 0.939262 0.641438 0.461371 0.930721  1.03886 0.719837 0.378182 0.280631 0.187717 0.489029 0.317494 0.171553 0.346809      0.1 0.295737 0.233008  0.42011 0.350011 0.614501  1.02981 0.971918 0.618099 0.374727  1.07266  1.18411 0.495151 0.349841 0.463929 0.239008 0.123308   0.1554 0.467066 0.771814 0.358224 0.266772  0.61337 0.555776 0.431428 0.233803 0.779352 0.856792 0.476843 0.280091  1.14154 0.763661 0.671136  1.23249      0.1 0.126307 0.499732  0.22667 0.470768 0.563523  0.55568 0.621651 0.410471 0.363403 0.863051 0.305834 0.337274 0.711171 0.340142 0.263261 0.570288 0.668601 0.339534  0.54251 0.413014 0.344837  0.69666 0.994758  1.01118  1.01612 0.195401 0.422214 0.651328 0.722199 0.914364 0.775385 0.692452 0.262499 0.679723 0.768765 0.228329 0.467849 0.232493 0.351181 0.655097 0.436325 0.227254 0.694152 0.892838  1.30947 0.555384 0.489798  1.31415 0.919459 0.893043 0.780109 0.797784   0.6503 0.975533  1.24019 0.317739 0.231549 0.690935 0.757414 0.805212 0.314079 0.227813 0.542947 0.494825  0.45663  0.11444 0.219316 0.194618 0.291456 0.471297 0.102916 0.448736      0.1 0.429316      0.1 0.678831 0.362351 0.317315 0.534132 0.978986  1.03673 0.829051 0.966263 0.744606 0.875515 0.377909 0.281108  1.20759  1.12108 0.851867  1.35838 0.762939  0.81836  1.00421  1.04607 0.382144 0.474731  0.45749 0.736527 0.817625  1.02316 0.714234  0.89556  1.24609  1.19194 0.992334 0.736907  1.18064  1.03484 0.363081 0.654871  1.13574  1.34327      0.1  0.56332 0.273901 0.272058 0.778578 0.656686 0.239021      0.1 0.267402 0.189836 0.967121 0.752753 0.470659  1.00416  0.14184 0.415301  0.34972 0.173263  0.85875  1.16155 0.416542 0.162578 0.850301 0.688636 0.562227  0.68847 0.193938 0.129194 0.230977 0.302881 0.502699 0.884443  0.38723 0.729008 0.706416 0.576172 0.628744 0.679116 0.804265 0.327649 0.241659 0.442839      0.1 0.141297 0.489354 0.563822  1.10878  1.13733  1.05526 0.827439 0.510129 0.391631 0.236966 0.489663 0.437694 0.482613 0.171005 0.456733 0.107832  0.21841 0.654366 0.348558 0.141263 0.547208 0.698246 0.915684  1.16363 0.978303 0.804336 0.513211 0.115408  0.19437 0.459822 0.347711 0.562268 0.173764 0.583426 0.257646 0.119592 0.341052 0.299656 0.529344 0.659884      0.1  1.17393 0.654954";
//  // all smoothing
//  std::string input = "0.945729 0.976307  1.03428 0.922803 0.908162 0.928387 0.923772 0.970861 0.739995 0.667445 0.864534 0.877372 0.938643 0.915875 0.513681 0.538763 0.506841 0.501577 0.974759 0.917048  0.58456 0.562411  1.02287 0.906623 0.503966 0.448534 0.462212 0.662486 0.547523 0.742202 0.794281 0.882433  0.68079 0.735798 0.704593 0.652765 0.637719  0.59342 0.719524 0.666185 0.728554 0.766755 0.912256 0.983225 0.762131 0.997642 0.564232 0.551566 0.770453   0.7902 0.574907 0.491403  0.59145 0.647188 0.586105 0.665785 0.469413 0.485956 0.626217 0.581797 0.583051 0.589651 0.607785 0.517143 0.509571 0.588728    0.464 0.441199 0.601682 0.564583 0.408021 0.492313 0.695676 0.520056 0.967301 0.994492  0.72006 0.812056 0.580932 0.543974 0.412074 0.509558 0.472363 0.420408 0.614639  0.70518 0.518369 0.555913 0.767615 0.721443  0.66499 0.780732 0.745409 0.702691 0.578675 0.492348 0.505487 0.528667 0.459634 0.443581 0.531372 0.497401  0.54657 0.702448 0.669491 0.691286 0.712327 0.688527 0.804755 0.853029 0.614849 0.642658 0.781267 0.723299 0.647418 0.616276 0.559715 0.563288 0.560761 0.586068  1.02143   1.0083 0.697022 0.692066 0.649105 0.586505  0.50842 0.473782 0.843123 0.909064 0.724129 0.694502   1.0341  1.01561  1.00612 0.955392 0.453865 0.551759 0.511853 0.496578 0.441703 0.436574 0.476515 0.450176 0.631424 0.522619 0.621681 0.701251 0.906992 0.910985  0.56226 0.603016 0.728168 0.731048  0.62622 0.616812 0.637152 0.899459  1.00931  1.03018 0.934927  1.00057  0.60871 0.604253 0.525115 0.625125 0.630015 0.881308 0.830879 0.875384 0.821994 0.821826 0.459091 0.465378 0.574921 0.580437 0.536347 0.537001 0.635231 0.879758 0.874525 0.802784 0.759644 0.714992 0.768383 0.774931 0.903049 0.952268 0.646239 0.650424 0.910365 0.866323 0.806493 0.743949 0.614595 0.708373 0.716636 0.569139 0.586348 0.554273 0.653995 0.551048 0.695132 0.705533 0.575776 0.577045 0.620806  0.63444 0.542295 0.556505 0.541176 0.466775  0.74127 0.737039 0.725466 0.822593  1.03344 0.835672 0.881608 0.799242 0.942857 0.850276 0.734101 0.640706 0.962539 0.939134 0.922368 0.928459 0.861242 0.906302 0.821859 0.852303 0.360566 0.380174 0.441172  0.41981 0.931117 0.916954 0.914693 0.911038 0.977258 0.927966 0.951787 0.970115 0.876615  0.88918 0.586516 0.598693 0.878212 0.869342 0.510436 0.482299  0.52031 0.591423 0.507828 0.557571 0.620966 0.599084 0.544801 0.594146 0.991442 0.923835  1.00781 0.984882 0.440245 0.405829 0.533391  0.54121  1.02124 0.972565 0.555818 0.547355 0.799583 0.833291 0.689643 0.756113 0.447882 0.707309 0.490258 0.430826 0.686303 0.680448 0.620586  0.63243  0.69231 0.703635 0.752661 0.715243 0.678399 0.711288 0.648402 0.713339 0.673978 0.481517 0.637826 0.619344 0.900454 0.940935 0.844201 0.932658 0.652869  0.65783  0.46609 0.606779 0.719701 0.719041  0.62335 0.627396  0.46671  0.45173 0.654624 0.654062 0.555934 0.578341 0.766452 0.850717 0.768726 0.717392 0.970927 0.953372 0.443371 0.445319 0.728415 0.686605 0.482695  0.50632 0.473175 0.496803 0.464308 0.567936 0.538679 0.529659 0.639079 0.545218  1.00178 0.961609";
  //// partial smoothing
//  std::string input = "0.708835 0.710267 0.726805 0.719502 0.748067 0.754563 0.897151 0.973175 0.571963 0.554524  1.09677  1.10177 0.951042 0.991425 0.429642 0.523189 0.510414 0.497061 0.919855 0.884555   0.4165 0.299529  0.85083 0.870659 0.297623 0.289178 0.301883 0.266267 0.309991 0.364461 0.915028 0.923425 0.396361 0.374814 0.402586 0.374393 0.483616 0.472815 0.476383 0.470398 0.388831 0.369843  0.89645 0.849103 0.854761 0.897921 0.340675 0.324118 0.881245 0.818579 0.375708 0.249491 0.342503 0.399181 0.377114 0.387832 0.224659 0.290383 0.210848 0.286953 0.126795      0.1 0.418923 0.384923 0.355742 0.358021 0.350517 0.307796 0.353023 0.349837 0.296478 0.342967 0.197567 0.144865 0.895964 0.719962 0.858487 0.921898 0.458469 0.431617 0.360306 0.370915 0.269528 0.350846 0.361146 0.412634 0.307687 0.326048  1.00105 0.988259 0.521142 0.500558 0.862264 0.915394 0.316042 0.306814  0.31524 0.280493 0.318627 0.303204 0.344836 0.292015 0.368095 0.407377 0.382632 0.422486 0.460249 0.414852  1.04606  1.00925 0.538096 0.554022  1.10398  1.06234 0.289477 0.328279 0.328794 0.362463 0.104175      0.1 0.676965  0.66986 0.456614 0.410889 0.411988 0.416339 0.296561 0.261238 0.966455 0.970867 0.575156 0.422046 0.990091  1.00642  1.02622 0.923334 0.255521 0.273188 0.283388 0.300765 0.335727 0.326135 0.307153 0.343329 0.565429 0.560353 0.495359 0.502218  0.94713 0.893125 0.360828 0.341601 0.539527 0.572005 0.399471 0.407972 0.445331 0.492138 0.995745 0.977454 0.939351 0.972529 0.426646 0.409938 0.489775 0.484797 0.598527 0.742249 0.655828 0.718551  1.03464  1.01269 0.334132 0.345762 0.305434 0.275352 0.223077 0.344573 0.498217 0.574563 0.985087  1.01883 0.499216 0.411002   0.8647 0.765851 0.800336 0.850269 0.524808 0.679736 0.996185  1.03911 0.448838 0.444727 0.430036 0.450425 0.638288 0.610676  0.55908 0.527595 0.376126 0.329242 0.450168 0.397116 0.347905 0.363381 0.542785 0.552749 0.319641 0.359685 0.276924 0.219687 0.475649 0.362646  0.48225 0.461091 0.651268 0.713169 0.781368 0.786609 0.774272 0.953712 0.577408 0.513156  1.00008   1.0776 0.889911 0.804839 0.773542  0.87167 0.756468 0.787057 0.300625  0.29837 0.227688 0.225092 0.979346 0.900233  1.10151  1.08466 0.925602 0.920534 0.957843 0.913365  1.25912  1.17791 0.257083 0.379923  0.99404 0.968504 0.270507 0.241745 0.252556 0.328957 0.358163 0.411682 0.203391 0.255813 0.300486  0.33753 0.978151 0.961658 0.919887 0.898043 0.326512 0.315228 0.430978  0.48089 0.982343  0.97023 0.238016 0.169638 0.984707 0.944067 0.418884 0.410428 0.310948 0.283772 0.277693 0.311795 0.558552 0.545326 0.546296 0.541095 0.538643 0.485452 0.489026 0.531194 0.527574 0.538424 0.346681 0.507334  0.23724 0.261999 0.620971 0.535757 0.657033 0.709447 0.696868 0.663974 0.673102 0.601794 0.404187  0.39977 0.342347 0.306016 0.538081 0.512663 0.323139 0.325162 0.545257 0.473144 0.629513  0.55288 0.935137  1.02985  1.07644  1.14838 0.893776 0.906422 0.255336 0.305454 0.361311    0.386 0.259928 0.274468 0.442697 0.559747 0.309385 0.323016 0.281754 0.353847 0.485552 0.310707 0.802212 0.897472";
//  std::string input= "1.02302  1.04777  1.09892  1.05907 0.816632 0.895051 0.900279 0.974469 0.575607 0.638555  1.09821  1.02105   1.0778  1.10588 0.669602 0.655472 0.570462 0.561674  1.07181 0.974657 0.568111 0.522818 0.679791 0.982933 0.531759 0.520171 0.549284 0.568658 0.509252 0.530701 0.846616  1.10867 0.447451 0.449206 0.561093 0.483984 0.438575 0.603301 0.441142 0.437865 0.650288 0.558825 0.973767 0.861985  1.02421  1.02164 0.478363 0.391957  0.80584 0.953766 0.508043 0.404758 0.529082 0.589347 0.498216  0.46223 0.486261 0.428482  0.55517 0.542928 0.606956 0.493717 0.487533 0.461645 0.490472 0.481462 0.428294 0.453694 0.382004 0.375175 0.539285 0.459154 0.372449 0.463366 0.949594 0.943892  1.00132 0.981191   0.5661 0.484588 0.382766 0.317738 0.582981 0.303662 0.508565 0.532228 0.401825 0.404473  1.10418  1.07146  0.61001 0.514849 0.956558  1.07876 0.523468 0.462003 0.461911 0.353092 0.646981 0.318345 0.309516 0.124023 0.315679 0.350342 0.437427  0.31381 0.355343 0.313206   1.0118 0.971943 0.741267 0.377699 0.960215 0.960959 0.409146 0.459244 0.399665 0.348643  0.41503 0.490533  1.00719 0.975454 0.386293 0.369608 0.363168  0.38489 0.205275 0.712923 0.971517  1.06392 0.371197 0.365171  0.99431  1.14141 0.915116 0.927281 0.430392 0.499516 0.239297 0.301811 0.374693 0.459467 0.464505 0.398637 0.536349 0.526641 0.257956 0.407434  1.11036 0.967259 0.326278 0.320242 0.409564 0.469723 0.428103  0.54809 0.458904 0.525865  1.05687  1.06452  1.00726  1.02514 0.501496 0.477221 0.562436 0.617247 0.540053 0.540387  1.16773  1.08834  1.08129   1.0743 0.307516 0.307269 0.437101 0.219919 0.367048 0.437181 0.438626 0.561891  1.11417  1.02859 0.375978 0.389359 0.903533 0.923082 0.955874 0.978956 0.528481 0.444148  1.05883  0.98255 0.882767 0.362639 0.374795 0.384008 0.421806 0.448986 0.524588 0.321359 0.399063 0.387911 0.405102 0.475856 0.356675 0.304901 0.481631 0.519472 0.459902 0.446764 0.574927 0.577946 0.590154 0.534151 0.574459 0.595642 0.971675 0.875466 0.799316 0.804595 0.809511  1.09953 0.449433  0.46192  1.01352 0.998945 0.993558 0.987353 0.882011 0.962604 0.936607 0.846663  0.40419 0.360486 0.609334 0.442783 0.925594 0.908178 0.921698 0.927049  1.01454  1.00374  1.13567  1.09611 0.794308  1.03968 0.388759 0.430648 0.985176 0.930454 0.505983 0.526916 0.510345 0.450845 0.317993 0.419242 0.563853 0.739317 0.393637 0.306697  1.07475  1.08261  1.10147   1.2103 0.371798 0.376676 0.348156 0.410902  1.13437 0.852618 0.300119 0.338259  1.21054  1.20056 0.417809 0.451645 0.276258  0.27499 0.419633 0.401944  0.50248 0.208766 0.548096 0.507433  0.31543 0.576948 0.495005 0.356382 0.459704 0.479574 0.288822 0.872915 0.413925 0.479212 0.531823 0.566585  1.00172 0.968965  1.10938  1.08955 0.402236 0.402779 0.380065 0.463202 0.490375 0.478635 0.510601 0.416691 0.355187 0.356098 0.426383 0.437369 0.491994 0.420628  1.02224  1.05844  1.19694  1.20841 0.891027 0.956284 0.558159 0.391349 0.470355 0.473984  0.47495 0.461602 0.376134 0.387998 0.391375 0.427512  0.47189 0.465937 0.480775 0.498621  1.02737  1.04433";
//std::string input = "   1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 0.7 0.7 1.2 1.2 1.2 1.2 0.7 0.7 0.7 0.7 1.2 1.2 0.3 0.3 1.2 1.2 0.3 0.3 0.3 0.3 0.3 0.3 1.2 1.2 0.3 0.3 0.3 0.3 0.7 0.7 0.7 0.7 0.7 0.7 1.2 1.2 1.2 1.2 0.3 0.3 1.2 1.2 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 1.2 1.2 1.2 1.2 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 1.2 1.2 0.7 0.7 1.2 1.2 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.7 0.7 0.7 0.7 0.7 0.7 1.2 1.2 0.7 0.7 1.2 1.2 0.3 0.3 0.3 0.3 0.3 0.3 1.2 1.2 0.7 0.7 0.3 0.3 0.3 0.3 1.2 1.2 0.7 0.7 1.2 1.2 1.2 1.2 0.3 0.3 0.7 0.7 0.3 0.3 0.3 0.3 0.7 0.7 0.7 0.7 1.2 1.2 0.3 0.3 0.7 0.7 0.7 0.7 0.7 0.7 1.2 1.2 1.2 1.2 0.3 0.3 0.7 0.7 0.7 1.2 1.2 1.2 1.2 1.2 0.3 0.3 0.3 0.3 0.3 0.3 0.7 0.7 1.2 1.2 0.7 0.7 1.2 1.2 1.2 1.2 0.7 0.7 1.2 1.2 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.3 0.3 0.7 0.7 0.3 0.3 0.7 0.7 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.7 1.2 1.2 1.2 1.2 1.2 1.2 0.7 0.7 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 0.3 0.3 0.3 0.3 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 0.3 0.3 1.2 1.2 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 1.2 1.2 1.2 1.2 0.3 0.3 0.3 0.3 1.2 1.2 0.3 0.3 1.2 1.2 0.3 0.3 0.3 0.3 0.3 0.3 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.3 0.3 0.7 0.7 1.2 1.2 1.2 1.2 0.7 0.7 0.3 0.3 0.3 0.3 0.7 0.7 0.3 0.3 0.7 0.7 0.7 0.7 1.2 1.2 1.2 1.2 1.2 1.2 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.7 0.3 0.3 0.3 0.3 0.7 0.3 1.2 1.2";

// Use a string stream to parse the input string

//  barrel vault input
//  std::string input = "0.603211 0.582539      0.2 0.248386      0.2      0.2 0.767215      0.2      0.2      0.2 0.202734      0.2      0.2      0.2      0.2 0.213507      0.2 0.207058      0.2      0.2 0.704531 0.476738 0.212233      0.2      0.2      0.2      0.2      0.2 0.213588      0.2      0.2      0.2      0.2      0.2 0.204953      0.2 0.205638      0.2      0.2 0.211224      0.2      0.2      0.2 0.235327 0.505332 0.564947 0.415514 0.396038 0.525133 0.384806  0.21718 0.384194 0.329483  0.40842 0.656612 0.653226 0.772378 0.388935 0.456589      0.2 0.470676 0.331928      0.2      0.2      0.2      0.2      0.2      0.2      0.2 0.506056 0.266635 0.223505 0.402499 0.482019      0.2 0.212834 0.233823      0.2 0.265661 0.215777      0.2 0.518797 0.598352 0.532747 0.312627 0.356615      0.2      0.2 0.521281 0.217425      0.2      0.2      0.2 0.213585      0.2      0.2 0.239487  0.33364 0.381807 0.345852 0.207039 0.343042 0.210913      0.2 0.229156      0.2      0.2 0.301757      0.2 0.251984 0.263997 0.238135 0.257933      0.2 0.220821      0.2 0.251547 0.231111      0.2 0.251576      0.2 0.200438 0.245766      0.2      0.2      0.2      0.2      0.2      0.2      0.2 0.233514      0.2 0.236009 0.747703      0.2      0.2      0.2      0.2 0.201686 0.306074      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2 0.231011      0.2      0.2      0.2 0.342023 0.405928  1.30128      0.2      0.2      0.2 0.222755 0.369408      0.2      0.2      0.2      0.2 0.266573 0.212299 0.261289      0.2      0.2      0.2      0.2 0.205701      0.2 0.415196      0.2      0.2 0.700461      0.2 0.614619 0.633269 0.471299 0.572943 0.238729      0.2      0.2      0.2      0.2      0.2 0.201848      0.2      0.2      0.2 0.260757      0.2      0.2 0.241912 0.231577 0.206964 0.642412 0.531094 0.688937 0.631971      0.2 0.687367 0.414784 0.403995 0.470979 0.421387 0.208627      0.2      0.2      0.2      0.2      0.2  0.46765 0.565743 0.426891 0.398633 0.260929      0.2 0.327539      0.2 0.524582 0.276374 0.323151      0.2      0.2      0.2 0.214096 0.244177 0.381581 0.385016 0.697144 0.552069 0.488573 0.633189 0.306641      0.2      0.2      0.2      0.2 0.354263      0.2 0.217089      0.2      0.2      0.2      0.2 0.458531 0.507196      0.2      0.2 0.241274 0.213623      0.2 0.250177      0.2      0.2      0.2  0.31098      0.2 0.303707 0.200018      0.2      0.2      0.2 0.218994 0.203817 0.734031      0.2 0.424479 0.397716 0.335522 0.330319      0.2 0.248361 0.217941      0.2 0.331722 0.376872 0.228469 0.333177 0.468798 0.288605 0.438912 0.602209 0.802098 0.619485 0.665479 0.321341 0.534217 0.364245      0.2      0.2 0.203763      0.2      0.2      0.2  0.37045 0.229989      0.2 0.337044 0.206587      0.2 0.707937 0.711246 0.563414 0.473124 0.727691 0.574393      0.2 0.546597      0.2 0.577205      0.2      0.2      0.2 0.362386  0.76491 0.344798 0.396255      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2 0.234735 0.212714 0.215484      0.2      0.2 0.368292      0.2  0.84843      0.2      0.2      0.2 0.209434 0.206398  0.65798 0.633651 0.345414 0.366021 0.423764 0.879553 0.417858 0.702675 0.292627 0.336314      0.2 0.218088      0.2 0.225614 0.203848      0.2      0.2      0.2 0.357736 0.530194 0.598631 0.540636 0.251587 0.207637 0.625448  1.31078 0.676785  0.28743      0.2 0.438943 0.290125 0.244296 0.297009 0.650143 0.511678 0.514662 0.664044 0.910676      0.2      0.2      0.2      0.2      0.2      0.2 0.210483 0.232684 0.323652 0.236437 0.295942 0.464496      0.2      0.2 0.205611      0.2      0.2      0.2      0.2      0.2      0.2 0.206718  0.53704 0.427443 0.516796 0.347615 0.391973 0.529476      0.2  0.27892 0.211279 0.501307 0.466255      0.2 0.367187 0.981022      0.2      0.2  0.29571      0.2 0.514414 0.312875      0.2 0.327525      0.2      0.2      0.2      0.2 0.913458 0.743306 0.721178 0.763718 0.582705 0.559572      0.2  0.51486 0.788875  0.38756 0.278474 0.376858 0.544162 0.435584 0.236818 0.269158 0.563729 0.367013 0.429932 0.499256 0.738589 0.787576      0.2 0.654039      0.2 0.216046      0.2  0.20747      0.2      0.2      0.2 0.206835      0.2 0.329223      0.2      0.2      0.2      0.2 0.327828 0.488236 0.369819 0.310481 0.612288 0.292581 0.757918      0.2 0.403184 0.892783 0.757774 0.751365 0.705941 0.489945      0.2      0.2 0.423932 0.249384      0.2 0.247152      0.2      0.2      0.2 0.495352      0.2      0.2 0.361183 0.206969      0.2      0.2 0.531914 0.382848      0.2      0.2      0.2 0.213346      0.2 0.205703 0.352903  0.33621 0.461194 0.320487 0.482184 0.451983 0.443562  0.63458 0.207811  0.26023 0.329775      0.2      0.2      0.2 0.363947      0.2 0.200568      0.2      0.2      0.2  0.44918 0.442179 0.500974 0.418213      0.2 0.368097 0.283745 0.395319 0.234648      0.2      0.2 0.708087  0.33137 0.230926      0.2  0.26374      0.2      0.2      0.2      0.2      0.2      0.2 0.367898 0.747323      0.2 0.786357  0.20359      0.2 0.509843      0.2 0.741585 0.445104 0.647747 0.640822 0.852691 0.542614 0.717132 0.445332 0.428137 0.410679 0.242564      0.2 0.353367 0.295859 0.263034      0.2      0.2      0.2 0.217183 0.592347 0.385692 0.327328 0.448575 0.288959 0.529957 0.484185      0.2 0.245418 0.570036 0.454767 0.361185  0.40818 0.212467 0.219706 0.341195      0.2 0.363399  0.44799 0.719617 0.455839 0.452002 0.622025      0.2      0.2      0.2  0.46054 0.663302      0.2      0.2  0.79132 0.212012      0.2 0.508546 0.224672 0.383442 0.565924 0.222257 0.524375 0.712887 0.731343 0.465437  0.28507      0.2      0.2 0.455182 0.553395 0.702535 0.659964 0.214627 0.255553 0.443986  0.54389 0.206794      0.2 0.899007 0.701892 0.849456 0.822624      0.2 0.219536      0.2 0.204848 0.320944      0.2 0.383451 0.308211 0.218973   0.2144 0.622475 0.596716      0.2      0.2      0.2  0.22819      0.2      0.2 0.214701      0.2      0.2      0.2      0.2      0.2 0.399654 0.422288 0.511956 0.391773 0.444223      0.2      0.2 0.285402      0.2      0.2      0.2      0.2 0.463281 0.476113 0.336627 0.260045 0.328734  0.45553      0.2 0.277925 0.452793 0.362572 0.342656 0.285953      0.2 0.205049      0.2      0.2 0.207012 0.207275      0.2 0.239255  0.20262 0.758493      0.2 0.351494      0.2      0.2      0.2      0.2 0.350498 0.391813 0.257382 0.253388      0.2      0.2 0.200126 0.201007      0.2      0.2      0.2 0.224919 0.430777 0.432158      0.2      0.2  0.20259 0.286867 0.602741  0.56085 0.541703 0.540661 0.534532  0.21239 0.842405 0.471296 0.554861  0.72308      0.2      0.2 0.231189 0.217732      0.2  0.23653 0.310451 0.242297 0.260124 0.276624      0.2      0.2      0.2      0.2      0.2      0.2      0.2 0.200732      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2 0.414264 0.477859      0.2      0.2      0.2 0.211226      0.2 0.234825 0.456381 0.420851 0.209155 0.496824 0.620883 0.718791 0.672349 0.799175      0.2      0.2 0.331401 0.424937 0.443788 0.586855      0.2      0.2      0.2      0.2 0.239411      0.2 0.203129      0.2 0.207713  0.74537 0.209035 0.480394      0.2      0.2      0.2      0.2 0.214675      0.2      0.2      0.2 0.232909      0.2      0.2  0.22061 0.228266      0.2 0.473259 0.598472  0.36061  0.42643      0.2 0.383924      0.2      0.2      0.2      0.2      0.2 0.206023 0.659658  0.64314 0.512149 0.581685 0.248201 0.259893      0.2      0.2      0.2      0.2      0.2      0.2      0.2 0.423545      0.2      0.2  0.20395      0.2 0.268939 0.302722 0.586127 0.774218      0.2      0.2 0.290737 0.315492 0.203893 0.235642  0.99028 0.653593      0.2 0.412966      0.2      0.2      0.2      0.2 0.382215 0.311114 0.248518      0.2 0.245839      0.2      0.2      0.2 0.295494 0.268468 0.271718 0.255585 0.305038 0.347913 0.378155 0.558045 0.369869 0.485454 0.362824 0.440931 0.307174 0.316497      0.2      0.2 0.262467      0.2 0.413885 0.215037 0.820575 0.809402 0.213447      0.2      0.2 0.477748 0.655966 0.792741      0.2      0.2 0.237298      0.2 0.608443 0.550701 0.734351 0.246407 0.529289  0.21779      0.2 0.405077 0.336308      0.2      0.2 0.207611      0.2      0.2 0.366974  0.40965 0.243714      0.2 0.800014      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2      0.2 0.200157      0.2      0.2 0.204207      0.2      0.2      0.2      0.2 0.206817      0.2 0.631594 0.288891      0.2      0.2      0.2      0.2      0.2 0.405797 0.377272      0.2 0.486394 0.574073  1.28637 0.588181 0.346565      0.2      0.2 0.422933  0.48165  0.43285 0.529548  0.50661 0.492725      0.2 0.400728      0.2 0.397018      0.2 0.210369 0.278075 0.215395      0.2      0.2  0.21825 0.210775 0.710694  0.66886      0.2 0.418085 0.507803 0.615966 0.705946      0.2 0.387884 0.419105      0.2 0.233369 0.254929      0.2 0.484089      0.2 0.450745 0.405804 0.479371 0.343297      0.2      0.2      0.2      0.2      0.2 0.229486 0.212013      0.2 0.454456 0.422037      0.2 0.251194 0.626461 0.647506 0.229626      0.2      0.2      0.2 0.715534 0.641494 0.236713      0.2 0.702092 0.604981 0.218427      0.2 0.220775      0.2      0.2 0.228866 0.640981 0.626239      0.2      0.2      0.2 0.208764      0.2 0.221717 0.269891 0.937256  0.28439 0.216815      0.2 0.290111      0.2      0.2      0.2 0.450789  0.77199 0.268989 0.693204 0.573153 0.262217 0.293831      0.2 0.319364      0.2      0.2      0.2 0.764117      0.2      0.2 0.610359 0.319869      0.2      0.2      0.2 0.277916 0.223445      0.2 0.394908 0.504202      0.2 0.214729      0.2      0.2      0.2      0.2 0.201752      0.2 0.422835 0.508619      0.2 0.202541 0.413332 0.440655 0.201473      0.2 0.404882 0.201266 0.229316 0.452874      0.2      0.2 0.214375 0.678119 0.200522      0.2      0.2 0.483107 0.591381 0.630533  0.70114      0.2  1.05968 0.222638 0.207056      0.2      0.2 0.297059      0.2      0.2      0.2      0.2      0.2      0.2 0.466233 0.335222 0.239436 0.348841 0.540478 0.716777 0.711051  1.27961 0.595785 0.501219      0.2      0.2      0.2      0.2      0.2      0.2 0.569853 0.447405 0.293752 0.278412      0.2      0.2      0.2 0.565687 0.210943 0.300961      0.2      0.2 0.257465 0.209526 0.295415 0.216177   0.4139 0.423824      0.2 0.260668 0.658094 0.730693 0.509911 0.441954 0.813316 0.447285      0.2 0.208446      0.2      0.2      0.2      0.2 0.466203 0.482707";
//std::string input = "0.382531  0.275819  0.401656   0.32805  0.294253  0.255046  0.336997  0.353428  0.261874  0.273506  0.256747  0.324603   0.23171  0.299289  0.333434  0.332338  0.481115  0.456192  0.624661  0.614271   0.91056  0.690785  0.437153  0.231816  0.656844  0.685693  0.542915  0.641085  0.639188  0.615573  0.347746  0.318636  0.819231  0.728116  0.318649  0.267946  0.314717  0.318718  0.280511  0.316563   0.30003  0.294324  0.287481   0.28981  0.351131  0.299794  0.269329  0.268636  0.685014  0.538668  0.470212  0.570003  0.401106  0.445363   1.01754   1.17937  0.740827  0.718866  0.622364  0.638822   1.15156   1.13366    0.6012  0.539967  0.328657  0.423791  0.341125   0.34732       0.2  0.238376  0.460305       0.2  0.452511  0.416849  0.304667  0.386228  0.475463  0.385616   0.35128  0.388475  0.422038    0.3848  0.298705  0.427351  0.311458  0.294814  0.361426  0.239426  0.281576   0.28178  0.525768  0.451344  0.464403  0.354399  0.622787  0.426516       0.2       0.2  0.315761  0.245983       0.2  0.275921  0.339047  0.381544  0.315305  0.368048  0.483777       0.2   0.39854       0.2  0.310646  0.354658  0.332339  0.328646  0.539449  0.515567  0.538184  0.602089  0.404201  0.303466  0.392872  0.329937  0.365724  0.277462  0.408021  0.244712  0.323018   0.32839  0.256688  0.296239  0.231515  0.241949  0.252838  0.279474  0.479647  0.446646   0.47916  0.415406  0.442967  0.468766  0.379105  0.302316  0.422562   0.34895    0.4231  0.432442  0.713819  0.912934  0.758553  0.809342  0.302711  0.312584  0.353096  0.417092  0.315945   0.27704  0.692178  0.746113  0.670683  0.543055   0.27703  0.273992  0.241933  0.294794  0.282729   0.25313  0.374093  0.387503  0.339832  0.350962  0.328446  0.351344  0.547661  0.418225  0.430559  0.339355  0.352285  0.447646  0.376072  0.336582  0.300284  0.336947  0.613712  0.628124  0.308554  0.381918  0.684079  0.703756  0.538884  0.865315  0.387683  0.282357  0.246847  0.299961  0.336243  0.334617  0.317789  0.374596  0.337958  0.337615       0.2  0.267011  0.361578  0.412888  0.430199  0.359539    0.4763  0.450006  0.402742  0.343581  0.411273  0.390469  0.531307  0.478024  0.461741  0.505811  0.377936  0.317575   1.11573   1.03915  0.699537  0.601067  0.670293  0.715127  0.457426  0.447178  0.427152   0.41267  0.689233   0.60533  0.923245  0.801831   0.75183   0.78889  0.626144   0.50333  0.936273   0.96661  0.997508  0.982954  0.365508  0.348649       0.2       0.2   0.28376  0.273047  0.201271  0.375818  0.530504  0.620433  0.529229  0.518936  0.786504  0.634437  0.345621  0.338854  0.447178  0.568599  0.396167  0.441177  0.307359   0.27448  0.517588   0.54444  0.609572  0.543321   0.41655  0.419408  0.363547  0.333752  0.355552  0.426418  0.361279  0.367961  0.372631  0.400187    0.3215  0.453536  0.506687  0.509635  0.562644  0.534174  0.756713  0.828791  0.479714  0.543488  0.528291   0.52171  0.861914  0.811962   1.33615   1.26687   1.03071   1.11665   1.13257   1.10367  0.412786  0.437842  0.389379  0.364709  0.326479  0.337861  0.564694   0.59809  0.465116  0.628776  0.449343  0.406815   1.26179    1.1861   1.03157   1.01384   1.44399    1.1349  0.291875  0.347353  0.401393  0.377415  0.562546  0.545068  0.326616  0.544906  0.350051  0.323114  0.526952  0.524585  0.443186  0.439835  0.524329  0.521345  0.778321  0.748379  0.375164  0.297154  0.443794  0.321301  0.277818  0.287296  0.411082  0.301795  0.290192  0.253035  0.303977  0.289673  0.518675  0.459799   1.14653    1.2852  0.790096  0.799514  0.330255  0.255076  0.247707  0.292405  0.297408  0.301317  0.486647  0.490881  0.632405  0.604607  0.322126    0.2519  0.378165  0.401884  0.251833  0.295967  0.263806  0.321949  0.288138  0.236398  0.460337  0.419774   1.05684   1.06417  0.866788   1.02649  0.567487  0.634286   1.27709   1.19769   1.22655   1.30773   1.21378   1.14433    0.5697  0.603911  0.438981  0.428241  0.700184  0.727736  0.643691  0.584907  0.891107  0.905547  0.723934   1.08903  0.286997  0.341772  0.492222  0.708098  0.720961  0.664535  0.373351  0.330399  0.309107  0.320552  0.825047  0.813773  0.957574  0.736818  0.611837  0.904291  0.356751   0.30322  0.346419  0.315215  0.284328  0.259363  0.873215  0.781079  0.413426   0.38451  0.443772   0.53079  0.560073  0.425685  0.342184  0.365524  0.727072  0.639603  0.439427  0.404285  0.449586  0.476006  0.271305  0.426139  0.693334  0.722738  0.578428  0.836373  0.246399  0.236163  0.316179  0.317015  -0.16404  0.336459  0.478516  0.650502  0.249402  0.307475  0.647609  0.685285  0.408884  0.322863  0.267292  0.314654   0.74764  0.730085  0.357624  0.528892  0.598025  0.558902  0.595407   0.71578  0.311773  0.333316  0.295694  0.365439  0.333856  0.333162  0.346209  0.430896  0.321895  0.299545  0.303845  0.281841  0.482766  0.345277   0.24108  0.213333   0.21529  0.244318  0.267287  0.355379   0.53132  0.540689  0.266383  0.363366  0.282539  0.263465  0.365387  0.341634  0.353282  0.289521  0.658534  0.720009  0.755898  0.770749  0.698959  0.861173  0.865336  0.735564  0.343627  0.320167  0.257266  0.278239  0.400945   0.35635  0.879253  0.912251  0.671948  0.700759   1.08023   1.15815   1.13625   1.13768  0.393351  0.414782  0.387713  0.421936  0.347858  0.291468  0.335613  0.464887  0.450252  0.418162  0.584968   0.66823   1.19469    1.1385  0.523635  0.333154  0.541679  0.536896  0.310253  0.337449  0.445235   0.65683  0.417424  0.623396  0.223855  0.229252       0.2  0.290301  0.546687  0.394712  0.599794  0.443175  0.308451  0.357053  0.258172  0.252212  0.798527  0.789613  0.843016  0.759304  0.946953  0.960757  0.557407  0.644785   1.35883   1.16005   1.35365   1.33687  0.737962  0.452802  0.700398  0.435906  0.496753  0.405065  0.435061  0.403566  0.517392  0.508068  0.464558  0.479026  0.513069  0.474978  0.349759  0.323743  0.303269  0.322534  0.399006  0.325454   1.02569  0.936638   1.03449  0.973387  0.944767   1.17586  0.524117  0.552167   0.56288  0.258787  0.797511  0.778982  0.568532  0.465763  0.681337  0.638203  0.276408  0.288982  0.250137  0.395256  0.410446  0.421011  0.343814  0.359613  0.321146  0.386064  0.344905   0.50851  0.258747  0.242845  0.239503  0.236794       0.2   0.21984  0.427828  0.420033  0.454226  0.555648  0.842976  0.842704   1.24185   1.20228  0.568826  0.588848   1.16693   1.11349  0.585277  0.416541  0.561188  0.399186  0.480986  0.526951  0.554127   0.48932  0.509813   0.49753   0.52834  0.530309       0.2  0.261798  0.248715   0.22517   0.30512  0.298564  0.303109  0.294206  0.354249   0.27927  0.388962  0.270823  0.327458  0.267502  0.234127  0.282484  0.340198  0.318692  0.639224  0.624866  0.418281  0.380867  0.249089  0.378105  0.335242  0.498704       0.2  0.299951  0.284084  0.361789  0.291594  0.255257  0.303582  0.309109  0.366227  0.342573  0.303625  0.329058  0.348417  0.323466  0.432476  0.375758  0.277167  0.311862  0.374471  0.436843  0.377884  0.357274  0.270304  0.303593  0.212308  0.322433  0.290816  0.212394   0.46483  0.501182   0.59004   0.57594  0.405211  0.376654  0.283323  0.275114  0.552985   0.44736  0.579476  0.652278  0.389601  0.379404  0.493279  0.406981  0.676305  0.601498  0.352429   0.26554  0.266818  0.300118  0.641383  0.300158  0.970232   0.94238  0.729416  0.632417  0.336062  0.340183  0.923412  0.959984  0.636225  0.572428  0.651986  0.493942  0.794762   0.92289  0.352187  0.350474  0.341762  0.305279  0.325872  0.322383  0.298547  0.282352  0.342489  0.262292   0.44518  0.420574  0.657618  0.488447  0.420205  0.469018  0.345277  0.453232  0.477753  0.453798  0.352223  0.358431  0.464684  0.345864   0.29959  0.395096  0.395137  0.291977  0.701872   0.45621  0.231592  0.276448  0.312291  0.339709  0.682688  0.508138  0.339139  0.343255  0.353755  0.418966  0.853717  0.855095       0.2       0.2  0.233251  0.282194       0.2  0.259816  0.382966  0.355668  0.336193    0.3767  0.248455  0.227946   0.48366  0.616255  0.623897   0.54719  0.296848  0.289489  0.594958  0.492263  0.437321  0.390487  0.358189  0.381997  0.372815  0.406375   1.34206   1.32267  0.569958  0.604967  0.719636  0.739779  0.238432  0.230697  0.413602       0.2  0.433822  0.279167  0.615219  0.419834     0.786  0.696836  0.767971  0.873354  0.577979  0.580942   0.58423  0.527621  0.305426  0.342802  0.263898       0.2  0.320224  0.355987  0.365527  0.309479  0.408711   0.39141  0.278707  0.453161  0.366572  0.371114   0.89493   1.00988  0.367741  0.347653   1.21975   1.16467  0.534821  0.526306  0.420018  0.349389 0.0138728       0.2  0.401544  0.317971 0.0557299  0.278184  0.384669  0.336609   0.38162  0.493566  0.718709  0.883446  0.763711  0.816355  0.421552  0.397203  0.430705  0.243428  0.411401  0.398947    0.3703  0.364013  0.426789   0.39763  0.299015  0.416373  0.411855  0.401157  0.400167  0.435446  0.694339  0.708399  0.408084  0.366627  0.740172  0.861216   1.08453   1.00927  0.366669  0.292241  0.272643   0.39577   1.18868   1.07186  0.427937  0.473887  0.554879  0.575371  0.289423  0.283239  0.390991  0.371526  0.312697   0.27635  0.238916  0.391341  0.478252  0.644838  0.289297  0.403389  0.332601  0.305753  0.418513  0.288385  0.441523  0.410216  0.252503       0.2  0.376481   0.34534  0.343431  0.411641  0.426367   0.36451  0.389884  0.677838  0.589888  0.333695  0.717734  0.570602  0.230825  0.201854  0.275686  0.280573  0.335751   0.36071  0.362517  0.483639  0.370922  0.292736  0.341322  0.362214  0.328547  0.352925  0.546496   1.23116  0.629655  0.269439  0.412997  0.369298  0.326081   0.30344  0.330134  0.264996  0.542865  0.458098  0.370601  0.392452  0.515425  0.549512  0.461998       0.2  0.363619   0.43438   0.37548   0.36022  0.562665  0.485858  0.407654  0.300282  0.856395    0.8553  0.350943  0.362366  0.450545  0.435042  0.298063  0.326407  0.375567  0.385913  0.344198  0.525629  0.432579  0.496036  0.312274  0.369164  0.379216  0.236622  0.459519  0.454375  0.465052  0.459266  0.439879  0.349259  0.520118  0.547222  0.388717  0.390961  0.282217  0.292131   1.04965   1.02632  0.352651  0.318784  0.642102  0.664101   1.06467   1.03301  0.262906  0.349717   1.02437   1.02728  0.256665  0.272439  0.318031  0.274021  0.407778  0.438289   1.15605   1.10976   0.34233  0.252079  0.518242   0.38046  0.449408  0.249595  0.358918  0.283585  0.261148  0.278258  0.354212   0.27237  0.942867  0.920654  0.607836  0.610707   1.24095   1.23715   1.07114   1.01402  0.398692  0.380726  0.261857  0.338407  0.493355  0.501869  0.594338  0.549697       0.2       0.2  0.388932  0.424699  0.255025  0.246946  0.315127  0.286454  0.347171  0.230607  0.347128  0.378993  0.408096   0.50391  0.334102   0.37816  0.508544  0.538144  0.621489  0.467481  0.670035  0.857457  0.655171  0.678623  0.204449       0.2   0.53203  0.515006  0.316824  0.299748  0.523078  0.540196  0.825113  0.651607  0.314588  0.430364  0.330543  0.324716  0.222002  0.499157  0.473671  0.462001  0.390251   0.37497  0.637425  0.653284  0.374329  0.367114  0.329847  0.340097  0.986345  0.959389  0.835093  0.845157  0.687188   0.76806    1.0457  0.837648  0.940745  0.939156   0.43439  0.384307  0.437928   1.29667   1.21444   1.32194  0.713157  0.656419  0.414656  0.367604  0.640379  0.464113  0.870998  0.868733  0.655248  0.558451  0.908222  0.869175   1.05851   1.04227  0.216746  0.231398  0.431811  0.482392  0.574611  0.589783  0.409035  0.403588  0.315827  0.323493   0.44818   0.34126  0.625671  0.669809  0.739972  0.442315  0.403541  0.431997  0.375011  0.347033  0.295549  0.371954  0.472618  0.419879  0.951004   1.15525";

//std::istringstream iss(input);
//  double temp;
//  while (iss >> temp) {
//    thicknesses.push_back(temp);
//  }



  std::istringstream iss(input);
  double t_var1 = 0.6;
  double t_var2 = 0.2;

  double temp;
  while (iss >> temp) {
    if (temp > 0.5){
      thicknesses.push_back(t_var1);
    }
    else{
      thicknesses.push_back(t_var2);
    }
  }



  std::cout << V << std::endl;
  std::cout << F << std::endl;



//
//  std::vector<double> thicknesses(F.rows(), thickness);
//  int faceIndices[] = {1, 2, 3, 7, 9, 10, 11, 12, 16, 17, 18, 20, 21, 22, 24, 27, 28, 30, 31, 34, 38, 39, 40, 41, 44, 46, 47, 48, 49, 52, 54, 56, 57, 58, 60, 61, 62, 64, 65, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 103, 104, 105, 106, 107, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 134, 139, 140, 141, 142, 147, 149, 150, 152, 154, 155, 156, 157, 158, 162, 163, 165, 168, 174, 175, 176, 178, 179, 181, 182, 183, 186, 187, 188, 189, 192, 193, 195, 196, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 220, 221, 223, 224, 225, 228, 231, 234, 236, 237, 238, 240, 242, 250, 251, 258, 261, 271, 274, 276, 282, 284, 286, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 318, 319, 320, 324, 326, 327, 328, 329, 333, 334, 335, 337, 338, 339, 341, 344, 345, 347, 348, 351, 355, 356, 357, 358, 361, 363, 364, 365, 366, 369, 371, 373, 374, 375, 377, 378, 379, 381, 382, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 420, 421, 422, 423, 424, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 451, 456, 457, 458, 459, 464, 466, 467, 469, 471, 472, 473, 474, 475, 479, 480, 482, 485, 491, 492, 493, 495, 496, 498, 499, 500, 503, 504, 505, 506, 509, 510, 512, 513, 518, 519, 520, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 537, 538, 540, 541, 542, 545, 548, 551, 553, 554, 555, 557, 559, 567, 568, 575, 578, 588, 591, 593, 599, 601, 603, 605, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633};
//
//
//  for (int i = 0; i < sizeof(faceIndices)/sizeof(faceIndices[0]); ++i) {
//    int f = faceIndices[i]; // Direct access since it's a plain array
//    thicknesses[f] = thickness2;
//  }

  // declare StVKMembrane object (could be replaced seamlessly with e.g. NeohookeanMembrane)
  fsim::StVKMembrane model(V / stretch_factor, F, thickness, young_modulus, poisson_ratio, mass, pressure);
//     fsim::StVKMembrane model(V / stretch_factor, F, thicknesses, young_modulus, poisson_ratio, mass);


// declare NewtonSolver object
  optim::NewtonSolver<double> solver;

  std::vector<int> bdrs = {11, 13, 25, 29, 35, 51, 55, 65, 73, 79, 98, 99, 100, 104, 105, 114, 118, 130, 133, 142, 144, 149, 153, 155, 157, 158, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 186, 188, 200, 204, 210, 226, 230, 247, 274, 275, 284, 288, 302, 311, 313, 314, 322, 324, 326, 327, 332, 333, 334, 336, 337, 338, 339};
    // find bdr vertices
//  std::vector<int> bdrs = findBoundaryVertices(F);
// Sorting the vector in ascending order explicitly, although it's already sorted
  std::sort(bdrs.begin(), bdrs.end());
//  for ( auto& bdr : bdrs) {
//    std::cout << bdr << std::endl;
//  }
//  std::cout << bdrs.size() << std::endl;

  for (int bdr : bdrs) {
    solver.options.fixed_dofs.push_back(bdr * 3);
    solver.options.fixed_dofs.push_back(bdr * 3 + 1);
    solver.options.fixed_dofs.push_back(bdr * 3 + 2);
  }

  // specify fixed degrees of freedom (here the 4 corners of the mesh are fixed)
  solver.options.threshold = 1e-6; // specify how small the gradient's norm has to be

  // display the mesh
  polyscope::registerSurfaceMesh("mesh", V, F)
      ->setEdgeWidth(1)
      ->setEdgeColor({0.1, 0.1, 0.1})
      ->setSurfaceColor({0, 1., 1.});
  polyscope::view::upDir = polyscope::view::UpDir::ZUp;
  polyscope::options::groundPlaneHeightFactor = 0.4;
  polyscope::init();


  bool setThicknessColor = false;
  bool setThicknesses = false;
  bool showStrain = false;
  bool showStress = false;
  bool showDeviation = false;
  bool showRef = false;

  Eigen::VectorXd xTarget(V.size());
  for(int i = 0; i < V.rows(); ++i)
    for(int j = 0; j < 3; ++j)
      xTarget(3 * i + j) = V(i, j);


  polyscope::state::userCallback = [&]()
  {
      ImGui::PushItemWidth(100);
      if(ImGui::InputDouble("Stretch factor", &stretch_factor, 0, 0, "%.2f"))
        model = fsim::StVKMembrane(V / stretch_factor, F, thickness, young_modulus, poisson_ratio, mass, pressure);

      if(ImGui::InputDouble("Thickness", &thickness, 0, 0, "%.2f")){
        for (int i = 0; i < F.rows(); ++i) {
          thicknesses[i] = thickness;
        }
      model = fsim::StVKMembrane(V / stretch_factor, F, thicknesses, young_modulus, poisson_ratio, mass, pressure);}

//      if(ImGui::InputDouble("Thickness2", &thickness2, 0, 0, "%.2f")){
//        for (int i = 0; i < sizeof(faceIndices)/sizeof(faceIndices[0]); ++i) {
//          int f = faceIndices[i]; // Direct access since it's a plain array
//          thicknesses[f] = thickness2;
//        }
//        model = fsim::StVKMembrane(V / stretch_factor, F, thicknesses, young_modulus, poisson_ratio, mass, pressure);
//      }

//        model.setThickness(thickness);

      if(ImGui::InputDouble("Possian", &poisson_ratio, 0, 0, "%.2f"))
        model.setPoissonRatio(poisson_ratio);

      if(ImGui::InputDouble("Modulus", &young_modulus, 0, 0, "%.2f"))
        model.setYoungModulus(young_modulus);

      if(ImGui::InputDouble("Mass", &mass, 0, 0, "%.3f"))
        model.setMass(mass);

      if(ImGui::InputDouble("Pressure", &pressure, 0, 0, "%.2f"))
        model.setPressure(pressure);

      if(ImGui::Button("Solve"))
      {
        // Newton's method: finds a local minimum of the energy (Fval = energy value, Optimality = gradient's norm)
        solver.solve(model, Map<VectorXd>(V.data(), V.size()));

        // Display the result of the optimization
        polyscope::getSurfaceMesh("mesh")->updateVertexPositions(
            Map<fsim::Mat3<double>>(solver.var().data(), V.rows(), 3));

        if (showDeviation) {

//          Eigen::MatrixXd VTarget = xTarget.reshaped<Eigen::RowMajor>(V.rows(), 3);
//          Eigen::MatrixXd Vsolve = Map<fsim::Mat3<double>>(solver.var().data(), V.rows(), 3))
          fsim::Mat3<double> Vsolve = Map<fsim::Mat3<double>>(solver.var().data(), V.rows(), 3);
          Eigen::VectorXd d = (V - Vsolve).cwiseProduct((V - Vsolve)).rowwise().sum();
          d = d.array().sqrt();
          std::cout << d << std::endl;
          std::cout << "Avg distance = "
                    << 100 * d.sum() / d.size() / (Vsolve.colwise().maxCoeff() - Vsolve.colwise().minCoeff()).norm()
                    << "\n";
          std::cout << "Max distance = "
                    << 100 * d.lpNorm<Eigen::Infinity>() /
                       (Vsolve.colwise().maxCoeff() - Vsolve.colwise().minCoeff()).norm()
                    << "\n";
          polyscope::getSurfaceMesh("mesh")->addVertexScalarQuantity("Distance", d)->setEnabled(true);
        }

        fsim::saveOBJ("/Users/duch/Downloads/pillow_o.off", Map<fsim::Mat3<double>>(solver.var().data(), V.rows(), 3), F);
      }

//      if (ImGui::Checkbox("Show Strain", &showStrain)) {
//        if (showStrain){
//          for (int i = 0; i < F.rows(); i++) {
//            Eigen::Vector3i faceV = F.row(i);
//            fsim::StVKElement element(solver.var().data(), faceV, thicknesses[i]);
//          }
//        }
//      }

      if (ImGui::Checkbox("Show Stress", &showStress)) {
        if (showStress){

        }
      }

      if(ImGui::Button("Init"))
      {
        solver.init(model, Map<VectorXd>(V.data(), V.size()));
      }
      if(ImGui::Button("Solve one step")){
        solver.solve_one_step();
        polyscope::getSurfaceMesh("mesh")->updateVertexPositions(
            Map<fsim::Mat3<double>>(solver.var().data(), V.rows(), 3));

        if (showDeviation) {

//          Eigen::MatrixXd VTarget = xTarget.reshaped<Eigen::RowMajor>(V.rows(), 3);
//          Eigen::MatrixXd Vsolve = Map<fsim::Mat3<double>>(solver.var().data(), V.rows(), 3))
          fsim::Mat3<double> VTarget = Map<fsim::Mat3<double>>(solver.var().data(), V.rows(), 3);
          Eigen::VectorXd d = (V - VTarget).cwiseProduct((V - VTarget)).rowwise().sum();
          d = d.array().sqrt();
//          std::cout << d << std::endl;
          std::cout << "Avg distance = "
                    << 100 * d.sum() / d.size() / (VTarget.colwise().maxCoeff() - VTarget.colwise().minCoeff()).norm()
                    << "\n";
          std::cout << "Max distance = "
                    << 100 * d.lpNorm<Eigen::Infinity>() /
                       (VTarget.colwise().maxCoeff() - VTarget.colwise().minCoeff()).norm()
                    << "\n";
          polyscope::getSurfaceMesh("mesh")->addVertexScalarQuantity("Distance", d)->setEnabled(true);
        }

      }

      if (ImGui::Checkbox("Set Thicknesses", &setThicknesses)) {
        if (setThicknesses){
          model = fsim::StVKMembrane(V / stretch_factor, F, thicknesses, young_modulus, poisson_ratio, mass, pressure);
        }
        else{
          model = fsim::StVKMembrane(V / stretch_factor, F, thickness, young_modulus, poisson_ratio, mass, pressure);
        }
      }
      if (ImGui::Checkbox("Set Deviation", &showDeviation)) {
      }

      if (ImGui::Checkbox("Use Custom Color", &setThicknessColor)) {
        if (setThicknessColor) {

          Eigen::VectorXd scalarsEigen(thicknesses.size());
          for (size_t i = 0; i < thicknesses.size(); ++i) {
            scalarsEigen(i) = thicknesses[i];
          }

          // Add the scalar quantity to the mesh
          polyscope::getSurfaceMesh("mesh")->addFaceScalarQuantity("Scalar Values", scalarsEigen);

          auto *scalarQ = polyscope::getSurfaceMesh("mesh")->addFaceScalarQuantity("Scalar Values", scalarsEigen);
//            scalarQ->setColormap(polyscope::gl::ColorMapID::COOLWARM); // Example colormap
          scalarQ->setEnabled(true); // Make sure it's enabled for visualization

        }
      }
      if (ImGui::Checkbox("Show Reference Mesh", &showRef)) {
        if (showRef){
          polyscope::registerSurfaceMesh("refmesh", V, F)
              ->setEdgeWidth(1)
              ->setEdgeColor({0.1, 0.1, 0.1})
              ->setSurfaceColor({0, 1., 1.});
        }
      }

  };
  polyscope::show();
//  std::cout << model::stress << std::endl;
//  std::cout << V << std::endl;
}
